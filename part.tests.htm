<!DOCTYPE html>

<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8">
  
	<script src="https://rawgithub.com/jashkenas/underscore/master/underscore-min.js" type="text/javascript"></script>
	<script src="http://codeorigin.jquery.com/jquery-2.0.3.min.js" type="text/javascript"></script>
	
	<script src="js/ace/ace.js" type="text/javascript"></script>
	
	<script src="js/csg.js" ></script>

	<script src="js/three.min.js"></script>
	
	<script src="js/ThreeCSG.js"></script>
	
	<script src="js/arboreal.js"></script>

	<script src="js/axCAD.js" ></script>

	<script src="example2.jscad"></script>
	
<script>
	function log(txt) {
		$('#log').append('<br/>' + txt);
	}
	
	function httpGet(theUrl)
	{
		var xmlHttp = null;

		xmlHttp = new XMLHttpRequest();
		xmlHttp.open( "GET", theUrl, false );
		xmlHttp.send( null );
		return xmlHttp.responseText;
	}
	
	function toCameraCoords(position) {
		camera.updateMatrix();
		camera.updateMatrixWorld();
		camera.matrixWorldInverse.getInverse(camera.matrixWorld);
		
		return position.clone().applyMatrix4(camera.matrixWorldInverse); 
	}
	
	function ScaleInView(mesh) {
	  var tmp_fov = 0.0;
	  
	  mesh.geometry.computeBoundingBox();

	  for (var i=0; i<2; i++) {
	  	if (i==0) {
			proj2d = toCameraCoords(mesh.geometry.boundingBox.min);
		} else {
			proj2d = toCameraCoords(mesh.geometry.boundingBox.max);
		}

		angle = 114.59 * Math.max( // 2 * (Pi / 180)
		  Math.abs(Math.atan(proj2d.x/proj2d.z) / camera.aspect),
		  Math.abs(Math.atan(proj2d.y/proj2d.z))
		);
		tmp_fov = Math.max(tmp_fov, angle);
	 }

	 camera.fov = tmp_fov + 5; // An extra 5 degrees keeps all lines visible
	 camera.updateProjectionMatrix();
	}
	
	var screw;
	var camera, scene, renderer, light;
   	var geometry, material, mesh;
   	var project;

	$(function() {
	
		project = new Project();
		project.loadFromURL('testProject.json');
	
		$('#editor').html(httpGet('example2.jscad'));
	
		//var txt = httpGet('example2.jscad');
		var spec = {};
		spec.l = {};
		spec.l.value = 4;
		spec.r = {};
		spec.r.value = 4;
		
		screw = Screw.make(spec);
		screw.visualiseWithGL();
		
   	 	init();
    	animate();
	
		var editor = ace.edit("editor");
		editor.setTheme("ace/theme/github");
		editor.getSession().setMode("ace/mode/javascript");
		
	});
	
	function init() {
		// get container element
		var glElement = $( '#gl' );
		
		camera = new THREE.PerspectiveCamera( 75, glElement.width() / glElement.height(), 1, 10000 );
		camera.position.z = 100;

		scene = new THREE.Scene();

		mesh = screw.visualisations[0].mesh;
		mesh.geometry.computeBoundingBox();
		
		mesh.castShadow = true;
		mesh.receiveShadow = true;
		
		var planeGeo = new THREE.PlaneGeometry(200, 200, 10, 10);
		var planeMat = new THREE.MeshLambertMaterial({color: 0xFFFFFF});
		var plane = new THREE.Mesh(planeGeo, planeMat);
		plane.rotation.x = -Math.PI/2;
		plane.position.y = -25;
		plane.receiveShadow = true;
		scene.add(plane);
  
		
		var ambient	= new THREE.AmbientLight( 0x909090 );
		scene.add( ambient );
		
		light	= new THREE.SpotLight( 0x606060, 2 );
		light.target.position.set( 0, 0, 0 );
		light.shadowCameraNear		= 1;
		light.castShadow		= true;
		light.shadowDarkness		= 0.4;
		//light.shadowCameraVisible	= true;
		light.position = mesh.geometry.boundingBox.max;
		light.position.x += 20;
		light.position.y += 20;
		light.position.z = 50;
		
		scene.add( light );
		
		scene.add( mesh );

		renderer = new THREE.WebGLRenderer({
					antialias		: true,	// to get smoother output
					preserveDrawingBuffer	: true,	// to allow screenshot
					clearAlpha: 1.0,
					clearColor: 0xffffff
				});
		renderer.shadowMapEnabled	= true;
		renderer.shadowMapSoft		= true;
		renderer.physicallyBasedShading = true;
		
		renderer.setClearColor(0xFFFFFF, 1);
		
		renderer.setSize( glElement.width(), glElement.height() );

		//controls = new THREE.OrbitControls(camera, renderer.domElement);
		
		//document.body.appendChild( renderer.domElement );
		glElement.append(renderer.domElement);
		
		//ScaleInView(mesh);
		
		renderer.render( scene, camera );
	}

	function animate() {

		// note: three.js includes requestAnimationFrame shim
		requestAnimationFrame( animate );

		if (mesh) {
			mesh.rotation.x += 0.01;
			mesh.rotation.y += 0.02;
			
			//light.position.x = 50 + Math.cos(mesh.rotation.x) * 10;
			//light.position.y = Math.cos(mesh.rotation.x * 0.7) * 10;
		}

		renderer.render( scene, camera );

    }
	
	


</script>

<style type="text/css" media="screen">
    body {
        overflow: hidden;
    }
    
    #editor { 
        margin: 0;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
		width:50%;
    }
	
	#gl {
		margin:0;
		position:absolute;
		top:0;
		left: 50%;
		right:0;
		bottom:0;
	}
 </style>

</head>

<body>
  
  
  
  <pre id="editor">
  
  </pre>
  
  <div id="gl">
  
  </div>
  
  <div id="log"/>
  


</body>
</html>
